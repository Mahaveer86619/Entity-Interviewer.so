services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "6060:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: adminer
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "6061:8080"

  go-server:
    build:
      context: ./go-server
      dockerfile: Dockerfile
    container_name: go-server
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      PORT: "6062"
    ports:
      - "6062:6062"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./go-server/views:/app/views
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6062/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  python-llm:
    build:
      context: ./python-llm
      dockerfile: Dockerfile
    container_name: python-llm
    ports:
      - "6063:8000"
    environment:
      API_HOST: "http://go-server:6062"
    depends_on:
      postgres:
        condition: service_healthy
      go-server:
        condition: service_healthy

  python-tts:
    build:
      context: ./python-tts
      dockerfile: Dockerfile
    container_name: python-tts
    ports:
      - "6064:8001"
    environment:
      API_HOST: "http://go-server:6062"
    depends_on:
      postgres:
        condition: service_healthy
      go-server:
        condition: service_healthy

  go-admin:
    build:
      context: ./go-admin
      dockerfile: Dockerfile
    container_name: go-admin
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data: